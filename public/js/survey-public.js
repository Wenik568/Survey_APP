// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let currentSurvey = null;
let responses = {};

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', async () => {
    const uniqueLink = getUniqueLinkFromURL();
    if (uniqueLink) {
        await loadSurvey(uniqueLink);
    } else {
        showError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è');
    }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ URL
function getUniqueLinkFromURL() {
    const path = window.location.pathname;
    const match = path.match(/\/survey\/([^\/]+)$/);
    return match ? match[1] : null;
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
async function loadSurvey(uniqueLink) {
    try {
        const response = await fetch(`/api/surveys/public/${uniqueLink}`);
        const result = await response.json();

        if (result.success) {
            currentSurvey = result.data.survey;
            displaySurvey();
        } else {
            showError(result.message || '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:', error);
        showError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.');
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
function displaySurvey() {
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    document.getElementById('surveyTitle').textContent = currentSurvey.title;
    
    // –û–ø–∏—Å
    const descContainer = document.getElementById('surveyDescriptionContainer');
    if (currentSurvey.description && currentSurvey.description.trim()) {
        descContainer.innerHTML = `
            <div class="survey-description">
                <h3>üìÑ –û–ø–∏—Å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è</h3>
                <p>${currentSurvey.description}</p>
            </div>
        `;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω—å
    updateQuestionCounter();

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏
    generateSurveyForm();

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    document.getElementById('loadingContainer').style.display = 'none';
    document.getElementById('surveyContainer').style.display = 'block';

    // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    document.getElementById('submitButton').addEventListener('click', submitSurvey);

    // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
    addProgressTracking();
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
function generateSurveyForm() {
    const formContainer = document.getElementById('surveyForm');
    let formHTML = '';

    currentSurvey.questions.forEach((question, index) => {
        const isRequired = question.required;
        const questionId = question._id;

        formHTML += `
            <div class="container question" id="question-${questionId}">
                <div class="question-title">
                    ${index + 1}. ${question.text}
                    ${isRequired ? '<span class="question-required">*</span>' : ''}
                </div>
                ${generateQuestionInput(question, index)}
            </div>
        `;
    });

    formContainer.innerHTML = formHTML;
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–ª—è –≤–≤–æ–¥—É –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è
function generateQuestionInput(question, index) {
    const questionId = question._id;
    
    switch (question.type) {
        case 'text':
            return `
                <input 
                    type="text" 
                    id="answer-${questionId}" 
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                    data-question-id="${questionId}"
                    data-required="${question.required}"
                >
            `;

        case 'textarea':
            return `
                <textarea 
                    id="answer-${questionId}" 
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                    data-question-id="${questionId}"
                    data-required="${question.required}"
                ></textarea>
            `;

        case 'radio':
            let radioHTML = '<div class="form-group">';
            question.options.forEach((option, optIndex) => {
                radioHTML += `
                    <label>
                        <input 
                            type="radio" 
                            name="question-${questionId}" 
                            value="${option.value}"
                            data-question-id="${questionId}"
                            data-required="${question.required}"
                        >
                        ${option.text}
                    </label>
                `;
            });
            radioHTML += '</div>';
            return radioHTML;

        case 'checkbox':
            let checkboxHTML = '<div class="form-group">';
            question.options.forEach((option, optIndex) => {
                checkboxHTML += `
                    <label>
                        <input 
                            type="checkbox" 
                            name="question-${questionId}" 
                            value="${option.value}"
                            data-question-id="${questionId}"
                            data-required="${question.required}"
                        >
                        ${option.text}
                    </label>
                `;
            });
            checkboxHTML += '</div>';
            return checkboxHTML;

        default:
            return `<p>–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –ø–∏—Ç–∞–Ω–Ω—è: ${question.type}</p>`;
    }
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
function addProgressTracking() {
    // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏
    const inputs = document.querySelectorAll('input, textarea');
    inputs.forEach(input => {
        input.addEventListener('change', updateProgress);
        input.addEventListener('input', updateProgress);
    });
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
function updateProgress() {
    const totalQuestions = currentSurvey.questions.length;
    let answeredQuestions = 0;

    currentSurvey.questions.forEach(question => {
        const questionId = question._id;
        let hasAnswer = false;

        if (question.type === 'text' || question.type === 'textarea') {
            const input = document.getElementById(`answer-${questionId}`);
            if (input && input.value.trim()) {
                hasAnswer = true;
            }
        } else if (question.type === 'radio') {
            const radio = document.querySelector(`input[name="question-${questionId}"]:checked`);
            if (radio) {
                hasAnswer = true;
            }
        } else if (question.type === 'checkbox') {
            const checkboxes = document.querySelectorAll(`input[name="question-${questionId}"]:checked`);
            if (checkboxes.length > 0) {
                hasAnswer = true;
            }
        }

        if (hasAnswer) {
            answeredQuestions++;
        }
    });

    // –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
    const progress = (answeredQuestions / totalQuestions) * 100;
    document.getElementById('progressBar').style.width = `${progress}%`;
    
    // –û–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    document.getElementById('questionCounter').textContent = 
        `–í—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ ${answeredQuestions} –∑ ${totalQuestions} –ø–∏—Ç–∞–Ω—å`;
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω—å
function updateQuestionCounter() {
    const totalQuestions = currentSurvey.questions.length;
    document.getElementById('questionCounter').textContent = 
        `–ü–∏—Ç–∞–Ω–Ω—è 0 –∑ ${totalQuestions}`;
}

// –ó–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑ —Ñ–æ—Ä–º–∏
function collectAnswers() {
    const answers = [];

    currentSurvey.questions.forEach(question => {
        const questionId = question._id;
        let answer = null;

        if (question.type === 'text' || question.type === 'textarea') {
            const input = document.getElementById(`answer-${questionId}`);
            if (input) {
                answer = input.value.trim();
            }
        } else if (question.type === 'radio') {
            const radio = document.querySelector(`input[name="question-${questionId}"]:checked`);
            if (radio) {
                answer = radio.value;
            }
        } else if (question.type === 'checkbox') {
            const checkboxes = document.querySelectorAll(`input[name="question-${questionId}"]:checked`);
            answer = Array.from(checkboxes).map(cb => cb.value);
        }

        answers.push({
            questionId: questionId,
            answer: answer
        });
    });

    return answers;
}

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
function validateAnswers(answers) {
    const errors = [];

    currentSurvey.questions.forEach((question, index) => {
        if (question.required) {
            const answer = answers.find(a => a.questionId === question._id);
            
            if (!answer || 
                answer.answer === null || 
                answer.answer === '' || 
                (Array.isArray(answer.answer) && answer.answer.length === 0)) {
                errors.push(`–ü–∏—Ç–∞–Ω–Ω—è ${index + 1} "${question.text}" —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º`);
            }
        }
    });

    return errors;
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
async function submitSurvey() {
    const submitButton = document.getElementById('submitButton');
    const originalText = submitButton.textContent;
    
    try {
        // –ë–ª–æ–∫—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É
        submitButton.disabled = true;
        submitButton.textContent = '‚è≥ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ...';

        // –ó—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const answers = collectAnswers();

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        const errors = validateAnswers(answers);
        if (errors.length > 0) {
            alert('‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è (–ø–æ–∑–Ω–∞—á–µ–Ω—ñ –∑—ñ—Ä–æ—á–∫–æ—é *):\n\n' + errors.join('\n'));

            // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –¥–æ –ø–µ—Ä—à–æ–≥–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            const firstErrorQuestion = currentSurvey.questions.find((q, idx) => {
                if (!q.required) return false;
                const answer = answers.find(a => a.questionId === q._id);
                return !answer || answer.answer === null || answer.answer === '' ||
                       (Array.isArray(answer.answer) && answer.answer.length === 0);
            });

            if (firstErrorQuestion) {
                const questionElement = document.getElementById(`question-${firstErrorQuestion._id}`);
                if (questionElement) {
                    questionElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    questionElement.style.border = '3px solid #f56565';
                    setTimeout(() => {
                        questionElement.style.border = '2px solid #e2e8f0';
                    }, 3000);
                }
            }

            return;
        }

        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/api/surveys/respond', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                surveyId: currentSurvey._id,
                answers: answers
            })
        });

        const result = await response.json();

        if (result.success) {
            showResult(true, result.message, 
                `–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞ ${new Date().toLocaleString('uk-UA')}`
            );
            // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É
            document.getElementById('surveyForm').style.display = 'none';
            submitButton.style.display = 'none';
        } else {
            showResult(false, result.message);
        }

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error);
        showResult(false, '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    } finally {
        // –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É
        submitButton.disabled = false;
        submitButton.textContent = originalText;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
function showResult(success, message, details = '') {
    const resultContainer = document.getElementById('resultContainer');
    const className = success ? 'success' : 'error';
    
    let resultHTML = `
        <div class="container">
            <div class="${className}">
                <h3>${success ? '‚úÖ –£—Å–ø—ñ—Ö!' : '‚ùå –ü–æ–º–∏–ª–∫–∞'}</h3>
                <p>${message}</p>
                ${details ? `<p><small>${details}</small></p>` : ''}
            </div>
        </div>
    `;
    
    resultContainer.innerHTML = resultHTML;
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultContainer.scrollIntoView({ behavior: 'smooth' });
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
function showError(message) {
    document.getElementById('loadingContainer').style.display = 'none';
    document.getElementById('surveyContainer').style.display = 'none';
    document.getElementById('errorContainer').style.display = 'block';
    document.getElementById('errorMessage').textContent = message;
}