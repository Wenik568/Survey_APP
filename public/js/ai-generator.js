/**
 * AI Generator Module
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –æ–ø–∏—Ç—É–≤–∞–Ω—å
 */

class AIGenerator {
  constructor() {
    this.baseURL = '/api/ai';
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ localStorage –∞–±–æ cookies
   */
  getToken() {
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
    let token = localStorage.getItem('accessToken');

    // –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ localStorage, —à—É–∫–∞—î–º–æ –≤ cookies
    if (!token) {
      token = document.cookie
        .split('; ')
        .find(row => row.startsWith('accessToken='))
        ?.split('=')[1];
    }

    return token;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
   */
  async generateSurvey(params) {
    try {
      const response = await fetch(`${this.baseURL}/generate-survey`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.getToken()}`
        },
        body: JSON.stringify(params)
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è');
      }

      return data.data;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è
   */
  async improveQuestion(questionText) {
    try {
      const response = await fetch(`${this.baseURL}/improve-question`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.getToken()}`
        },
        body: JSON.stringify({ question: questionText })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || '–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è');
      }

      return data.data;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å
   */
  async generateAdditionalQuestions(topic, existingQuestions, count = 3) {
    try {
      const response = await fetch(`${this.baseURL}/generate-questions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.getToken()}`
        },
        body: JSON.stringify({
          topic,
          existingQuestions,
          count,
          questionTypes: ['radio', 'checkbox', 'text']
        })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å');
      }

      return data.data.questions;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
   */
  async analyzeSurvey(questions) {
    try {
      const response = await fetch(`${this.baseURL}/analyze-survey`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.getToken()}`
        },
        body: JSON.stringify({ questions })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || '–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è');
      }

      return data.data;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
   */
  showGeneratorModal(onGenerate) {
    const modal = document.getElementById('ai-generator-modal');
    if (!modal) {
      this.createGeneratorModal(onGenerate);
    } else {
      modal.style.display = 'flex';
    }
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
   */
  createGeneratorModal(onGenerate) {
    const modalHTML = `
      <div id="ai-generator-modal" class="modal" style="display: flex;">
        <div class="modal-content ai-modal">
          <div class="modal-header">
            <h2>ü§ñ AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Ç—É–≤–∞–Ω—å</h2>
            <span class="close-modal">&times;</span>
          </div>

          <div class="modal-body">
            <div class="form-group">
              <label for="ai-topic">üìå –¢–µ–º–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è *</label>
              <input
                type="text"
                id="ai-topic"
                placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∞–º–∏ –∫–æ–º–ø–∞–Ω—ñ—ó"
                required
              />
            </div>

            <div class="form-group">
              <label for="ai-goal">üéØ –¶—ñ–ª—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è</label>
              <select id="ai-goal">
                <option value="–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –¥—É–º–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤">–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –¥—É–º–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤</option>
                <option value="–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –ø—Ä–æ–¥—É–∫—Ç—É">–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –ø—Ä–æ–¥—É–∫—Ç—É</option>
                <option value="–ó–±—ñ—Ä –≤—ñ–¥–≥—É–∫—ñ–≤ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤">–ó–±—ñ—Ä –≤—ñ–¥–≥—É–∫—ñ–≤ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤</option>
                <option value="–ê–∫–∞–¥–µ–º—ñ—á–Ω–µ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è">–ê–∫–∞–¥–µ–º—ñ—á–Ω–µ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è</option>
                <option value="–ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç—Ä–µ–± —Ä–∏–Ω–∫—É">–ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç—Ä–µ–± —Ä–∏–Ω–∫—É</option>
              </select>
            </div>

            <div class="form-group">
              <label for="ai-hints">üí° –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –®–Ü (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ)</label>
              <textarea
                id="ai-hints"
                placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó—Ä–æ–±–∏ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —è–∫–æ—Å—Ç—ñ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è, –¥–æ–¥–∞–π –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ü—ñ–Ω—É, –∑–∞–ø–∏—Ç–∞–π –ø—Ä–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤..."
                rows="3"
                style="resize: vertical;"
              ></textarea>
              <small style="color: #718096; font-size: 0.85rem; display: block; margin-top: 0.3rem;">
                –û–ø–∏—à—ñ—Ç—å —â–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –±–∞—á–∏—Ç–∏ –≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ, —â–æ–± –®–Ü –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∞ –±—ñ–ª—å—à —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
              </small>
            </div>

            <div class="form-group">
              <label for="ai-question-count">üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å *</label>
              <input
                type="number"
                id="ai-question-count"
                min="1"
                max="30"
                value="7"
                required
                style="width: 150px;"
              />
              <small style="color: #718096; font-size: 0.85rem; display: block; margin-top: 0.3rem;">
                –í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥ 1 –¥–æ 30 –ø–∏—Ç–∞–Ω—å
              </small>
            </div>

            <div class="form-group">
              <label>üé® –¢–∏–ø–∏ –ø–∏—Ç–∞–Ω—å</label>
              <div class="checkbox-group">
                <label class="checkbox-label">
                  <input type="checkbox" name="question-types" value="radio" checked />
                  <span>–í–∏–±—ñ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É</span>
                </label>
                <label class="checkbox-label">
                  <input type="checkbox" name="question-types" value="checkbox" checked />
                  <span>–ú–Ω–æ–∂–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä</span>
                </label>
                <label class="checkbox-label">
                  <input type="checkbox" name="question-types" value="text" checked />
                  <span>–¢–µ–∫—Å—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ</span>
                </label>
              </div>
            </div>

            <div id="ai-generation-status" style="display: none;">
              <div class="progress-bar">
                <div class="progress-fill" id="ai-progress"></div>
              </div>
              <p class="status-text" id="ai-status-text">–ì–µ–Ω–µ—Ä—É—é –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è...</p>
            </div>
          </div>

          <div class="modal-footer">
            <button class="btn-secondary" id="cancel-generate">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
            <button class="btn-primary" id="start-generate">üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏</button>
          </div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHTML);

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    const modal = document.getElementById('ai-generator-modal');
    const closeBtn = modal.querySelector('.close-modal');
    const cancelBtn = document.getElementById('cancel-generate');
    const generateBtn = document.getElementById('start-generate');

    closeBtn.onclick = () => modal.style.display = 'none';
    cancelBtn.onclick = () => modal.style.display = 'none';

    generateBtn.onclick = async () => {
      const topic = document.getElementById('ai-topic').value.trim();
      const goal = document.getElementById('ai-goal').value;
      const hints = document.getElementById('ai-hints').value.trim();
      const questionCount = parseInt(document.getElementById('ai-question-count').value);
      const questionTypes = Array.from(
        document.querySelectorAll('input[name="question-types"]:checked')
      ).map(cb => cb.value);

      if (!topic) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è');
        return;
      }

      if (questionCount < 1 || questionCount > 30) {
        alert('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 30');
        return;
      }

      if (questionTypes.length === 0) {
        alert('–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–∏–ø –ø–∏—Ç–∞–Ω—å');
        return;
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
      this.showGenerationProgress();

      try {
        const surveyData = await this.generateSurvey({
          topic,
          goal: hints ? `${goal}. –î–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏–º–æ–≥–∏: ${hints}` : goal,
          questionCount,
          questionTypes
        });

        modal.style.display = 'none';

        if (onGenerate) {
          onGenerate(surveyData);
        }
      } catch (error) {
        alert('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: ' + error.message);
      } finally {
        this.hideGenerationProgress();
      }
    };

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–æ–¥–∞–ª—å–Ω–∏–º –≤—ñ–∫–Ω–æ–º
    modal.onclick = (e) => {
      if (e.target === modal) {
        modal.style.display = 'none';
      }
    };
  }

  /**
   * –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
   */
  showGenerationProgress() {
    const statusDiv = document.getElementById('ai-generation-status');
    const generateBtn = document.getElementById('start-generate');
    const progressFill = document.getElementById('ai-progress');

    if (statusDiv && generateBtn) {
      statusDiv.style.display = 'block';
      generateBtn.disabled = true;
      generateBtn.textContent = '–ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è...';

      // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–µ—Å—É
      let progress = 0;
      const interval = setInterval(() => {
        progress += 5;
        if (progress > 90) {
          clearInterval(interval);
        }
        if (progressFill) {
          progressFill.style.width = progress + '%';
        }
      }, 200);
    }
  }

  /**
   * –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
   */
  hideGenerationProgress() {
    const statusDiv = document.getElementById('ai-generation-status');
    const generateBtn = document.getElementById('start-generate');
    const progressFill = document.getElementById('ai-progress');

    if (statusDiv && generateBtn && progressFill) {
      progressFill.style.width = '100%';
      setTimeout(() => {
        statusDiv.style.display = 'none';
        generateBtn.disabled = false;
        generateBtn.textContent = 'üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏';
        progressFill.style.width = '0%';
      }, 500);
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
const aiGenerator = new AIGenerator();