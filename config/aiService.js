const { HfInference } = require('@huggingface/inference');
const { GoogleGenerativeAI } = require('@google/generative-ai');

/**
 * AI Service –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Ç—É–≤–∞–Ω—å
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ –∑ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–æ–º
 */
class AIService {
  constructor() {
    console.log('üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI Service...');
    console.log('üìå GOOGLE_AI_API_KEY exists:', !!process.env.GOOGLE_AI_API_KEY);
    console.log('üìå HUGGINGFACE_API_KEY exists:', !!process.env.HUGGINGFACE_API_KEY);

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Hugging Face (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π tier)
    this.hf = process.env.HUGGINGFACE_API_KEY
      ? new HfInference(process.env.HUGGINGFACE_API_KEY)
      : null;

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Gemini (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π tier)
    this.gemini = process.env.GOOGLE_AI_API_KEY
      ? new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY)
      : null;

    // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ (Gemini –Ω–∞–π–≤–∏—â–∏–π!)
    this.providers = [
      { name: 'gemini', enabled: !!this.gemini },        // –ù–∞–π–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å
      { name: 'huggingface', enabled: !!this.hf },
      { name: 'fallback', enabled: true } // –ó–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π fallback
    ];

    console.log('‚úÖ AI Service —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∏:', this.providers);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–º–∏
   */
  async generateSurvey(params) {
    const { topic, goal, questionCount = 7, questionTypes = ['radio', 'checkbox', 'text'], additionalInstructions } = params;

    console.log(`ü§ñ –ì–µ–Ω–µ—Ä—É—é –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è: "${topic}" (${questionCount} –ø–∏—Ç–∞–Ω—å)`);
    if (additionalInstructions) {
      console.log(`üí° –î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: ${additionalInstructions}`);
    }

    // –°–ø—Ä–æ–±–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ —Ä—ñ–∑–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏
    for (const provider of this.providers) {
      if (!provider.enabled) continue;

      try {
        const result = await this[`generate_${provider.name}`](topic, goal, questionCount, questionTypes, additionalInstructions);
        console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ ${provider.name}`);
        return result;
      } catch (error) {
        console.log(`‚ö†Ô∏è ${provider.name} failed:`, error.message);
      }
    }

    throw new Error('–í—Å—ñ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Google Gemini API
   */
  async generate_gemini(topic, goal, questionCount, questionTypes, additionalInstructions) {
    if (!this.gemini) throw new Error('Google Gemini –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–π–Ω–æ–≤—ñ—à—É –º–æ–¥–µ–ª—å Gemini 2.5 Flash (—à–≤–∏–¥–∫–∞ —ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞)
    const model = this.gemini.getGenerativeModel({
      model: 'gemini-2.5-flash'
    });

    const prompt = `–°—Ç–≤–æ—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –Ω–∞ —Ç–µ–º—É "${topic}".
–¶—ñ–ª—å: ${goal || '–∑–±—ñ—Ä –≤—ñ–¥–≥—É–∫—ñ–≤'}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å: ${questionCount}
${additionalInstructions ? `\n–î–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏–º–æ–≥–∏: ${additionalInstructions}` : ''}

–í–ê–ñ–õ–ò–í–û: –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON. –ù–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–æ –∞–±–æ –ø—ñ—Å–ª—è JSON. –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π markdown code blocks.

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
{
  "title": "–ù–∞–∑–≤–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è",
  "description": "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (1-2 —Ä–µ—á–µ–Ω–Ω—è)",
  "questions": [
    {
      "text": "–¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è",
      "type": "radio",
      "options": [{"text": "–í–∞—Ä—ñ–∞–Ω—Ç 1", "value": "value1"}],
      "required": true
    }
  ]
}

–¢–∏–ø–∏ –ø–∏—Ç–∞–Ω—å –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ${questionTypes.join(', ')}
- radio: –ø–∏—Ç–∞–Ω–Ω—è –∑ –æ–¥–Ω–∏–º –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–¥–æ–¥–∞–π 4-5 –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤)
- checkbox: –ø–∏—Ç–∞–Ω–Ω—è –∑ –¥–µ–∫—ñ–ª—å–∫–æ–º–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ (–¥–æ–¥–∞–π 4-6 –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤)
- text: –∫–æ—Ä–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (options: [])
- textarea: –¥–æ–≤–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (options: [])

–°—Ç–≤–æ—Ä–∏ ${questionCount} —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
–†–æ–∑–ø–æ–¥—ñ–ª–∏ —Ç–∏–ø–∏ –ø–∏—Ç–∞–Ω—å —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ.
–ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á—ñ—Ç–∫–∏–º–∏, –∑—Ä–æ–∑—É–º—ñ–ª–∏–º–∏ —Ç–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ —Ç–µ–º—ñ.${additionalInstructions ? `\n\n–û–ë–û–í'–Ø–ó–ö–û–í–û –≤—Ä–∞—Ö–æ–≤—É–π –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏–º–æ–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!` : ''}`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    return this.parseAIResponse(text, questionTypes, 'gemini');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Hugging Face API
   */
  async generate_huggingface(topic, goal, questionCount, questionTypes, additionalInstructions) {
    if (!this.hf) throw new Error('Hugging Face –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');

    const prompt = this.buildPrompt(topic, goal, questionCount, questionTypes);

    const response = await this.hf.textGeneration({
      model: 'mistralai/Mistral-7B-Instruct-v0.2',
      inputs: prompt,
      parameters: {
        max_new_tokens: 2000,
        temperature: 0.7,
        top_p: 0.95,
        return_full_text: false
      }
    });

    return this.parseAIResponse(response.generated_text, questionTypes, 'huggingface');
  }

  /**
   * Fallback –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ —à–∞–±–ª–æ–Ω–∞–º–∏ (–∑–∞–≤–∂–¥–∏ –ø—Ä–∞—Ü—é—î)
   */
  async generate_fallback(topic, goal, questionCount, questionTypes, additionalInstructions) {
    console.log('üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑ —à–∞–±–ª–æ–Ω–∞–º–∏');

    const templates = this.getQuestionTemplates(topic, goal);
    const questions = [];

    // –†–æ–∑–ø–æ–¥—ñ–ª —Ç–∏–ø—ñ–≤ –ø–∏—Ç–∞–Ω—å
    const typeCounts = this.distributeQuestionTypes(questionCount, questionTypes);

    for (const [type, count] of Object.entries(typeCounts)) {
      const typeTemplates = templates[type] || [];

      for (let i = 0; i < count && i < typeTemplates.length; i++) {
        // –¢–µ–∫—Å—Ç –≤–∂–µ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –≤ getQuestionTemplates, –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
        questions.push({
          text: typeTemplates[i].text,
          type: type,
          options: typeTemplates[i].options || [],
          required: true,
          order: questions.length + 1
        });
      }
    }

    return {
      title: `–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è: ${topic}`,
      description: `–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å –≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ. –í–∞—à–∞ –¥—É–º–∫–∞ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞ –¥–ª—è –Ω–∞—Å!`,
      questions: questions.slice(0, questionCount),
      aiGenerated: true,
      aiProvider: 'fallback'
    };
  }

  /**
   * –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
   */
  async improveQuestion(questionText) {
    try {
      if (this.hf) {
        const prompt = `–ü–æ–∫—Ä–∞—â —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –∑—Ä–æ–±–∏ –π–æ–≥–æ –±—ñ–ª—å—à —á—ñ—Ç–∫–∏–º —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å:\n\n"${questionText}"`;

        const response = await this.hf.textGeneration({
          model: 'mistralai/Mistral-7B-Instruct-v0.2',
          inputs: prompt,
          parameters: {
            max_new_tokens: 150,
            temperature: 0.5
          }
        });

        const improved = response.generated_text.trim().replace(/^["']|["']$/g, '');
        return { improved, original: questionText };
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è:', error.message);
    }

    // Fallback: –±–∞–∑–æ–≤–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
    return {
      improved: this.basicImprove(questionText),
      original: questionText
    };
  }

  /**
   * –ü–æ–±—É–¥–æ–≤–∞ –ø—Ä–æ–º–ø—Ç—É –¥–ª—è AI
   */
  buildPrompt(topic, goal, questionCount, questionTypes) {
    return `–°—Ç–≤–æ—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –Ω–∞ —Ç–µ–º—É "${topic}".
–¶—ñ–ª—å: ${goal || '–∑–±—ñ—Ä –≤—ñ–¥–≥—É–∫—ñ–≤'}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å: ${questionCount}
–¢–∏–ø–∏ –ø–∏—Ç–∞–Ω—å: ${questionTypes.join(', ')}

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (JSON):
{
  "title": "–ù–∞–∑–≤–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è",
  "description": "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (1-2 —Ä–µ—á–µ–Ω–Ω—è)",
  "questions": [
    {
      "text": "–¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è",
      "type": "radio",
      "options": [{"text": "–í–∞—Ä—ñ–∞–Ω—Ç 1", "value": "variant1"}],
      "required": true
    }
  ]
}

–°—Ç–≤–æ—Ä–∏ –¢–Ü–õ–¨–ö–ò JSON –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É:`;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI
   */
  parseAIResponse(text, questionTypes, provider = 'huggingface') {
    try {
      // –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ markdown code blocks
      let cleanText = text.trim();
      cleanText = cleanText.replace(/```json\s*/g, '').replace(/```\s*/g, '');

      // –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç—ñ
      const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è
        if (!parsed.questions || !Array.isArray(parsed.questions)) {
          throw new Error('–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –º–∞—Å–∏–≤ –ø–∏—Ç–∞–Ω—å');
        }

        // –î–æ–¥–∞—î–º–æ order –¥–æ –ø–∏—Ç–∞–Ω—å
        parsed.questions = parsed.questions.map((q, index) => ({
          ...q,
          order: index + 1,
          required: q.required !== undefined ? q.required : true
        }));

        parsed.aiGenerated = true;
        parsed.aiProvider = provider;

        console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ ${parsed.questions.length} –ø–∏—Ç–∞–Ω—å –≤—ñ–¥ ${provider}`);

        return parsed;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É AI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.message);
      console.log('üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å AI (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤):', text.substring(0, 200));
    }

    // –Ø–∫—â–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI');
  }

  /**
   * –ë–∞–∑–æ–≤–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–∏—Ç–∞–Ω–Ω—è
   */
  basicImprove(text) {
    // –î–æ–¥–∞—î–º–æ –∑–Ω–∞–∫ –ø–∏—Ç–∞–Ω–Ω—è —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    if (!text.trim().endsWith('?')) {
      text = text.trim() + '?';
    }

    // –ü–µ—Ä—à–∞ –ª—ñ—Ç–µ—Ä–∞ –≤–µ–ª–∏–∫–∞
    text = text.charAt(0).toUpperCase() + text.slice(1);

    return text;
  }

  /**
   * –†–æ–∑–ø–æ–¥—ñ–ª —Ç–∏–ø—ñ–≤ –ø–∏—Ç–∞–Ω—å
   */
  distributeQuestionTypes(total, types) {
    const distribution = {};
    const baseCount = Math.floor(total / types.length);
    const remainder = total % types.length;

    types.forEach((type, index) => {
      distribution[type] = baseCount + (index < remainder ? 1 : 0);
    });

    return distribution;
  }

  /**
   * –®–∞–±–ª–æ–Ω–∏ –ø–∏—Ç–∞–Ω—å –¥–ª—è fallback –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
   */
  getQuestionTemplates(topic, goal) {
    return {
      radio: [
        {
          text: '–Ø–∫ –±–∏ –≤–∏ –æ—Ü—ñ–Ω–∏–ª–∏ –∑–∞–≥–∞–ª—å–Ω—É —è–∫—ñ—Å—Ç—å –∑–∞ —à–∫–∞–ª–æ—é –≤—ñ–¥ 1 –¥–æ 5?',
          options: [
            { text: '–í—ñ–¥–º—ñ–Ω–Ω–æ (5)', value: '5' },
            { text: '–î–æ–±—Ä–µ (4)', value: '4' },
            { text: '–ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ (3)', value: '3' },
            { text: '–ü–æ–≥–∞–Ω–æ (2)', value: '2' },
            { text: '–î—É–∂–µ –ø–æ–≥–∞–Ω–æ (1)', value: '1' }
          ]
        },
        {
          text: '–ù–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ –∑–∞–≥–∞–ª–æ–º?',
          options: [
            { text: '–ü–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏–π', value: 'fully_satisfied' },
            { text: '–°–∫–æ—Ä—ñ—à–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏–π', value: 'satisfied' },
            { text: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ', value: 'neutral' },
            { text: '–°–∫–æ—Ä—ñ—à–µ –Ω–µ–∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏–π', value: 'dissatisfied' },
            { text: '–ü–æ–≤–Ω—ñ—Å—Ç—é –Ω–µ–∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏–π', value: 'fully_dissatisfied' }
          ]
        },
        {
          text: '–ß–∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç–µ –≤–∏ –Ω–∞—Å —ñ–Ω—à–∏–º?',
          options: [
            { text: '–û–±–æ–≤\'—è–∑–∫–æ–≤–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', value: 'definitely' },
            { text: '–®–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', value: 'probably' },
            { text: '–ù–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π', value: 'not_sure' },
            { text: '–®–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ –Ω—ñ', value: 'probably_not' },
            { text: '–¢–æ—á–Ω–æ –Ω—ñ', value: 'definitely_not' }
          ]
        },
        {
          text: '–Ø–∫ —á–∞—Å—Ç–æ –≤–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏?',
          options: [
            { text: '–©–æ–¥–Ω—è', value: 'daily' },
            { text: '–ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å', value: 'weekly' },
            { text: '–†–∞–∑ –Ω–∞ –º—ñ—Å—è—Ü—å', value: 'monthly' },
            { text: '–†—ñ–¥—à–µ –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ –º—ñ—Å—è—Ü—å', value: 'rarely' },
            { text: '–í–ø–µ—Ä—à–µ', value: 'first_time' }
          ]
        },
        {
          text: '–ß–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —è–∫—ñ—Å—Ç—å –≤–∞—à–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º?',
          options: [
            { text: '–ü–µ—Ä–µ–≤–∏—â—É—î –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è', value: 'exceeds' },
            { text: '–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º', value: 'meets' },
            { text: '–ß–∞—Å—Ç–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î', value: 'partially' },
            { text: '–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î', value: 'not_meets' }
          ]
        }
      ],
      checkbox: [
        {
          text: '–Ø–∫—ñ –∞—Å–ø–µ–∫—Ç–∏ –≤–∞–º –Ω–∞–π–±—ñ–ª—å—à–µ —Å–ø–æ–¥–æ–±–∞–ª–∏—Å—è?',
          options: [
            { text: '–Ø–∫—ñ—Å—Ç—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è', value: 'quality' },
            { text: '–®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏', value: 'speed' },
            { text: '–ó—Ä—É—á–Ω—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è', value: 'convenience' },
            { text: '–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ü—ñ–Ω–∞/—è–∫—ñ—Å—Ç—å', value: 'price' },
            { text: '–ü—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–∑–º', value: 'professionalism' },
            { text: '–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞', value: 'support' }
          ]
        },
        {
          text: '–©–æ –ø–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞ –≤–∞—à—É –¥—É–º–∫—É?',
          options: [
            { text: '–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å', value: 'functionality' },
            { text: '–ó—Ä—É—á–Ω—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É', value: 'interface' },
            { text: '–®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏', value: 'performance' },
            { text: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è', value: 'documentation' },
            { text: '–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏', value: 'support' },
            { text: '–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è', value: 'pricing' }
          ]
        },
        {
          text: '–Ø–∫—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏ –± —Ö–æ—Ç—ñ–ª–∏ –±–∞—á–∏—Ç–∏?',
          options: [
            { text: '–ú–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫', value: 'mobile_app' },
            { text: '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —ñ–Ω—à–∏–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏', value: 'integrations' },
            { text: '–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞', value: 'analytics' },
            { text: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥ —Å–µ–±–µ', value: 'customization' },
            { text: '–ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ—Å—Ç—å', value: 'multilingual' }
          ]
        }
      ],
      text: [
        {
          text: '–©–æ –≤–∞–º –Ω–∞–π–±—ñ–ª—å—à–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—è?',
          options: []
        },
        {
          text: '–Ø–∫—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∏ –± —Ö–æ—Ç—ñ–ª–∏ –±–∞—á–∏—Ç–∏?',
          options: []
        },
        {
          text: '–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–æ—é –¥—É–º–∫–æ—é –∞–±–æ –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏',
          options: []
        },
        {
          text: '–ß–æ–≥–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –¥–ª—è —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É?',
          options: []
        },
        {
          text: '–©–æ –Ω–∞–π–±—ñ–ª—å—à–µ –∑–∞–ø–∞–º\'—è—Ç–∞–ª–æ—Å—è –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è?',
          options: []
        }
      ],
      textarea: [
        {
          text: '–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—å–Ω–∏–º –≤—ñ–¥–≥—É–∫–æ–º –ø—Ä–æ –≤–∞—à –¥–æ—Å–≤—ñ–¥',
          options: []
        },
        {
          text: '–Ø–∫—ñ —É –≤–∞—Å —î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è?',
          options: []
        },
        {
          text: '–û–ø–∏—à—ñ—Ç—å –≤–∞—à –¥–æ—Å–≤—ñ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ',
          options: []
        }
      ]
    };
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI
   */
  async analyzeResponses(surveyData) {
    console.log(`üß† –ê–Ω–∞–ª—ñ–∑—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è: "${surveyData.title}"`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Gemini
    if (!this.gemini) {
      throw new Error('Google Gemini –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. AI –∞–Ω–∞–ª—ñ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    if (!surveyData.responses || surveyData.responses.length === 0) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É. –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 1 –≤—ñ–¥–ø–æ–≤—ñ–¥—å.');
    }

    try {
      const model = this.gemini.getGenerativeModel({
        model: 'gemini-2.5-flash'
      });

      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
      const analysisData = this.prepareDataForAnalysis(surveyData);

      const prompt = `–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö –æ–ø–∏—Ç—É–≤–∞–Ω—å. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–∞–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

üìã –û–ü–ò–¢–£–í–ê–ù–ù–Ø: "${surveyData.title}"
üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: ${surveyData.responses.length}
üìÖ –ü–µ—Ä—ñ–æ–¥: ${new Date(surveyData.createdAt).toLocaleDateString('uk-UA')}

${analysisData}

–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è:
1. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ñ–≤
2. –í–∏—è–≤–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Ç—Ä–µ–Ω–¥–∏ —Ç–∞ –ø–∞—Ç–µ—Ä–Ω–∏
3. –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π (–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π)
4. –ó–Ω–∞–π—Ç–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à—ñ —Ç–µ–º–∏ —Ç–∞ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è
5. –ù–∞–¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ, –¥—ñ—î–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü (–¥–æ—Ç—Ä–∏–º—É–π—Å—è —Ç–æ—á–Ω–æ):

üéØ –ó–ê–ì–ê–õ–¨–ù–ò–ô –í–ò–°–ù–û–í–û–ö
[2-3 —Ä–µ—á–µ–Ω–Ω—è –ø—Ä–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è]

üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ù–Ü –Ü–ù–°–ê–ô–¢–ò
- [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ñ–∞–∫—Ç –∑ —Ü–∏—Ñ—Ä–∞–º–∏]
- [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ñ–∞–∫—Ç –∑ —Ü–∏—Ñ—Ä–∞–º–∏]
- [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ñ–∞–∫—Ç –∑ —Ü–∏—Ñ—Ä–∞–º–∏]

üí≠ –ö–õ–Æ–ß–û–í–Ü –¢–ï–ú–ò
- [–¢–µ–º–∞ 1]: [–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å]
- [–¢–µ–º–∞ 2]: [–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å]
- [–¢–µ–º–∞ 3]: [–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å]

üòä –ù–ê–°–¢–†–Ü–ô –†–ï–°–ü–û–ù–î–ï–ù–¢–Ü–í
[–í–∏–∑–Ω–∞—á –∑–∞–≥–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π –∑ –æ–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è–º]

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
1. [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –¥—ñ—î–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è]
2. [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –¥—ñ—î–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è]
3. [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –¥—ñ—î–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è]

‚ö†Ô∏è –ó–û–ù–ò –£–í–ê–ì–ò
- [–©–æ –ø–æ—Ç—Ä–µ–±—É—î –Ω–µ–≥–∞–π–Ω–æ—ó —É–≤–∞–≥–∏]
- [–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏]

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Ñ–∞–∫—Ç–∏ –∑ –¥–∞–Ω–∏—Ö. –ü–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ, –∞–ª–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ.`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const analysisText = response.text();

      console.log('‚úÖ AI –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

      return {
        analysis: analysisText,
        metadata: {
          surveyTitle: surveyData.title,
          totalResponses: surveyData.responses.length,
          analyzedAt: new Date().toISOString(),
          aiProvider: 'gemini-2.5-flash'
        }
      };

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É:', error.message);
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ AI –∞–Ω–∞–ª—ñ–∑: ${error.message}`);
    }
  }

  /**
   * –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
   */
  prepareDataForAnalysis(surveyData) {
    let analysisText = 'üìù –î–ê–ù–Ü –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£:\n\n';

    surveyData.questionStats.forEach((question, index) => {
      analysisText += `–ü–ò–¢–ê–ù–ù–Ø ${index + 1}: ${question.text}\n`;
      analysisText += `–¢–∏–ø: ${question.type}\n`;

      if (question.type === 'text' || question.type === 'textarea') {
        // –¢–µ–∫—Å—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        analysisText += '–í—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ñ–≤:\n';
        const answers = Object.keys(question.answers);
        answers.forEach((answer, idx) => {
          const count = question.answers[answer];
          if (count > 1) {
            analysisText += `- "${answer}" (–∑–≥–∞–¥–∞–Ω–æ ${count} —Ä–∞–∑—ñ–≤)\n`;
          } else {
            analysisText += `- "${answer}"\n`;
          }
        });
      } else {
        // –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–±–æ—Ä—É (radio/checkbox)
        analysisText += '–†–æ–∑–ø–æ–¥—ñ–ª –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n';
        Object.entries(question.answers).forEach(([answer, count]) => {
          const percentage = ((count / surveyData.responses.length) * 100).toFixed(1);
          analysisText += `- "${answer}": ${count} –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (${percentage}%)\n`;
        });
      }

      analysisText += '\n';
    });

    return analysisText;
  }

  /**
   * –ß–∞—Ç –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
   * @param {Object} surveyContext - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–Ω–∞–∑–≤–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
   * @param {String} userMessage - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {Array} history - –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏
   * @returns {Promise<String>} - –í—ñ–¥–ø–æ–≤—ñ–¥—å AI
   */
  async chatAboutSurvey(surveyContext, userMessage, history = []) {
    console.log('üí¨ AI Chat: –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');

    if (!this.gemini) {
      throw new Error('AI —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
    }

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—Ä–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    const contextInfo = `–û–ü–ò–¢–£–í–ê–ù–ù–Ø: "${surveyContext.title}"
–ö–Ü–õ–¨–ö–Ü–°–¢–¨ –í–Ü–î–ü–û–í–Ü–î–ï–ô: ${surveyContext.totalResponses}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–ò–¢–ê–ù–ù–Ø–•:
${surveyContext.questionStats.map((q, i) => {
  const answersText = Object.entries(q.answers)
    .map(([answer, count]) => `  - "${answer}": ${count} –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π`)
    .join('\n');
  return `${i + 1}. ${q.text} (${q.type})\n${answersText}`;
}).join('\n\n')}`;

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
    let conversationHistory = '';
    if (history && history.length > 1) {
      // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑)
      conversationHistory = '\n\n–ü–û–ü–ï–†–ï–î–ù–Ø –†–û–ó–ú–û–í–ê:\n';
      for (let i = 1; i < history.length; i++) {
        const msg = history[i];
        if (msg.role === 'user') {
          conversationHistory += `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${msg.content}\n`;
        } else if (msg.role === 'assistant') {
          conversationHistory += `AI: ${msg.content}\n`;
        }
      }
    }

    const prompt = `–¢–∏ - AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.

${contextInfo}
${conversationHistory}

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î: ${userMessage}

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ë—É–¥—å –∫–æ—Ä–∏—Å–Ω–∏–º, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏—â–µ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å - –¥–∞–π —Ç–æ—á–Ω—É —Ü–∏—Ñ—Ä—É –∑ –¥–∞–Ω–∏—Ö.`;

    try {
      const model = this.gemini.getGenerativeModel({
        model: 'gemini-2.5-flash'
      });

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const responseText = response.text();

      return responseText;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Gemini chat:', error);
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI');
    }
  }
}

module.exports = new AIService();