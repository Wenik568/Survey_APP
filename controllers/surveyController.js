const Survey = require('../models/Survey');
const Response = require('../models/Response');
const aiService = require('../config/aiService');
const { hasAccess, isOwner } = require('../utils/surveyHelpers');

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–∏—Ç—É–≤–∞–Ω—å –¥–ª—è –¥–∞—à–±–æ—Ä–¥—É
const getDashboardStats = async (req, res) => {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (—Ç—ñ, —â–æ –Ω–µ –∑–∞–∫—Ä–∏—Ç—ñ)
    const activeSurveys = await Survey.countDocuments({
      creator: req.user.id,
      isActive: true,
      $or: [
        { closingDate: { $gt: new Date() } },
        { closingDate: null }
      ]
    });

    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    const completedSurveys = await Survey.countDocuments({
      creator: req.user.id,
      $or: [
        { isActive: false },
        { closingDate: { $lte: new Date() } }
      ]
    });

    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –≤—Å—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const surveys = await Survey.find({ creator: req.user.id });
    const surveyIds = surveys.map(survey => survey._id);
    const totalResponses = await Response.countDocuments({
      survey: { $in: surveyIds }
    });

    res.json({
      success: true,
      data: {
        activeSurveys,
        completedSurveys,
        totalResponses
      }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
const createSurvey = async (req, res) => {
  try {
    const { title, description, questions, closingDate, allowMultipleResponses, participantLimit, collaboratorEmails } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!title || !questions || questions.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–ù–∞–∑–≤–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–∏—Ç–∞–Ω–Ω—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    const survey = new Survey({
      title,
      description,
      questions,
      creator: req.user.id,
      closingDate: closingDate ? new Date(closingDate) : null,
      allowMultipleResponses: allowMultipleResponses || false,
      participantLimit: participantLimit || null
    });

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä—ñ–≤ —è–∫—â–æ —î
    if (collaboratorEmails && Array.isArray(collaboratorEmails) && collaboratorEmails.length > 0) {
      const User = require('../models/User');

      for (const email of collaboratorEmails) {
        const collaborator = await User.findOne({ email: email.toLowerCase() });

        if (collaborator && collaborator._id.toString() !== req.user.id) {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –¥–æ–¥–∞–Ω–∏–π –≤–∂–µ
          const alreadyAdded = survey.collaborators.some(
            c => (c.user._id ? c.user._id.toString() : c.user.toString()) === collaborator._id.toString()
          );

          if (!alreadyAdded) {
            survey.collaborators.push({
              user: collaborator._id,
              addedAt: new Date()
            });
          }
        }
      }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    survey.generateUniqueLink();

    await survey.save();

    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ questionIndex ‚Üí questionId –¥–ª—è skip logic
    if (survey.questions && survey.questions.length > 0) {
      let needsUpdate = false;
      survey.questions.forEach((question, index) => {
        console.log(`üìù –ü–∏—Ç–∞–Ω–Ω—è ${index}: "${question.text}"`, {
          hasSkipLogic: !!question.skipLogic,
          enabled: question.skipLogic?.enabled,
          hasCondition: !!question.skipLogic?.condition,
          questionIndex: question.skipLogic?.condition?.questionIndex,
          questionId: question.skipLogic?.condition?.questionId
        });

        if (question.skipLogic?.enabled && question.skipLogic.condition?.questionIndex !== undefined) {
          const sourceQuestion = survey.questions[question.skipLogic.condition.questionIndex];
          console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç—É—é questionIndex ${question.skipLogic.condition.questionIndex} ‚Üí questionId`);
          if (sourceQuestion) {
            question.skipLogic.condition.questionId = sourceQuestion._id.toString();
            delete question.skipLogic.condition.questionIndex;
            console.log(`‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ questionId: ${question.skipLogic.condition.questionId}`);
            needsUpdate = true;
          } else {
            console.log(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ sourceQuestion –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º ${question.skipLogic.condition.questionIndex}`);
          }
        }
      });

      if (needsUpdate) {
        console.log(`üíæ –ó–±–µ—Ä—ñ–≥–∞—é –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ questionId`);
        await survey.save();
      } else {
        console.log(`‚ÑπÔ∏è –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ skip logic`);
      }
    }

    // –ü–æ–ø—É–ª—è—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞
    await survey.populate('creator', 'username email');

    res.status(201).json({
      success: true,
      message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      data: {
        survey,
        surveyLink: `${req.protocol}://${req.get('host')}/survey/${survey.uniqueLink}`
      }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–ø–∏—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserSurveys = async (req, res) => {
  try {
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –≤–ª–∞—Å–Ω–∏–∫ –∞–±–æ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä
    const surveys = await Survey.find({
      $or: [
        { creator: req.user.id },
        { 'collaborators.user': req.user.id }
      ]
    })
      .populate('creator', 'username email')
      .populate('collaborators.user', 'username email name')
      .sort({ createdAt: -1 });

    res.json({
      success: true,
      count: surveys.length,
      data: { surveys }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω—å:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
const getSurvey = async (req, res) => {
  try {
    const { id } = req.params;
    
    const survey = await Survey.findById(id)
      .populate('creator', 'username email')
      .populate('collaborators.user', 'username email name');

    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É (–≤–ª–∞—Å–Ω–∏–∫ –∞–±–æ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä)
    if (!hasAccess(survey, req.user.id)) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
      });
    }

    res.json({
      success: true,
      data: { survey }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ (–ø–æ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—é)
const getSurveyByLink = async (req, res) => {
  try {
    const { uniqueLink } = req.params;
    
    const survey = await Survey.findOne({ 
      uniqueLink,
      isActive: true 
    }).populate('creator', 'username');

    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞—Ç–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
    if (survey.closingDate && new Date() > survey.closingDate) {
      return res.status(400).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ'
      });
    }

    res.json({
      success: true,
      data: { survey }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
const updateSurvey = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, description, questions, closingDate, isActive, allowMultipleResponses, participantLimit } = req.body;

    const survey = await Survey.findById(id);

    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É (–≤–ª–∞—Å–Ω–∏–∫ –∞–±–æ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä)
    if (!hasAccess(survey, req.user.id)) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
      });
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
    if (title) survey.title = title;
    if (description !== undefined) survey.description = description;
    if (questions) survey.questions = questions;
    if (closingDate) survey.closingDate = new Date(closingDate);
    if (isActive !== undefined) survey.isActive = isActive;
    if (allowMultipleResponses !== undefined) survey.allowMultipleResponses = allowMultipleResponses;
    if (participantLimit !== undefined) survey.participantLimit = participantLimit;

    await survey.save();

    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ questionIndex ‚Üí questionId –¥–ª—è skip logic (—è–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ)
    if (survey.questions && survey.questions.length > 0) {
      let needsUpdate = false;
      survey.questions.forEach((question) => {
        if (question.skipLogic?.enabled && question.skipLogic.condition?.questionIndex !== undefined) {
          const sourceQuestion = survey.questions[question.skipLogic.condition.questionIndex];
          if (sourceQuestion) {
            question.skipLogic.condition.questionId = sourceQuestion._id.toString();
            delete question.skipLogic.condition.questionIndex;
            needsUpdate = true;
          }
        }
      });

      if (needsUpdate) {
        await survey.save();
      }
    }

    await survey.populate('creator', 'username email');

    res.json({
      success: true,
      message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ',
      data: { survey }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
const deleteSurvey = async (req, res) => {
  try {
    const { id } = req.params;

    const survey = await Survey.findById(id);

    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É (—Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏)
    if (survey.creator.toString() !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: '–¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
      });
    }

    await Survey.findByIdAndDelete(id);

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    await Response.deleteMany({ survey: id });

    res.json({
      success: true,
      message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
const getSingleSurveyStats = async (req, res) => {
  try {
    const { id } = req.params;

    const survey = await Survey.findById(id);

    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É (–≤–ª–∞—Å–Ω–∏–∫ –∞–±–æ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä)
    if (!hasAccess(survey, req.user.id)) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
      });
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    const responses = await Response.find({ survey: id });

    // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = {
      totalResponses: responses.length,
      questionStats: []
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–∂–Ω–æ–º—É –ø–∏—Ç–∞–Ω–Ω—é
    survey.questions.forEach((question, questionIndex) => {
      const questionStats = {
        questionId: question._id,
        text: question.text,
        type: question.type,
        totalAnswers: 0,
        answers: {}
      };

      responses.forEach(response => {
        const answer = response.answers.find(a => 
          a.questionId.toString() === question._id.toString()
        );

        if (answer) {
          questionStats.totalAnswers++;
          
          if (question.type === 'checkbox') {
            // –î–ª—è –º–Ω–æ–∂–∏–Ω–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É
            if (Array.isArray(answer.answer)) {
              answer.answer.forEach(val => {
                questionStats.answers[val] = (questionStats.answers[val] || 0) + 1;
              });
            }
          } else {
            // –î–ª—è –æ–¥–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É —ñ —Ç–µ–∫—Å—Ç—É
            const answerValue = answer.answer;
            questionStats.answers[answerValue] = (questionStats.answers[answerValue] || 0) + 1;
          }
        }
      });

      stats.questionStats.push(questionStats);
    });

    res.json({
      success: true,
      data: stats
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// AI –∞–Ω–∞–ª—ñ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
const getAIAnalysis = async (req, res) => {
  try {
    const surveyId = req.params.id;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    const survey = await Survey.findById(surveyId);
    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (survey.creator.toString() !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ü—å–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
      });
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    const responses = await Response.find({ survey: surveyId });

    if (responses.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É. –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 1 –≤—ñ–¥–ø–æ–≤—ñ–¥—å.'
      });
    }

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–∞–Ω—å (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É)
    const questionStats = survey.questions.map(question => {
      const questionAnswers = {};

      responses.forEach(response => {
        const answer = response.answers.find(a => a.questionId.toString() === question._id.toString());
        if (answer && answer.answer) {
          if (Array.isArray(answer.answer)) {
            // –î–ª—è checkbox
            answer.answer.forEach(val => {
              questionAnswers[val] = (questionAnswers[val] || 0) + 1;
            });
          } else {
            // –î–ª—è radio, text, textarea
            const answerValue = answer.answer.toString();
            questionAnswers[answerValue] = (questionAnswers[answerValue] || 0) + 1;
          }
        }
      });

      return {
        text: question.text,
        type: question.type,
        answers: questionAnswers
      };
    });

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è AI
    const surveyData = {
      title: survey.title,
      createdAt: survey.createdAt,
      responses: responses,
      questionStats: questionStats
    };

    // –í–∏–∫–ª–∏–∫ AI –∞–Ω–∞–ª—ñ–∑—É
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:', survey.title);
    const analysisResult = await aiService.analyzeResponses(surveyData);

    res.json({
      success: true,
      data: analysisResult
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ AI –∞–Ω–∞–ª—ñ–∑—É'
    });
  }
};

// AI —á–∞—Ç –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
const aiChatResponse = async (req, res) => {
  try {
    const surveyId = req.params.id;
    const { message, history } = req.body;

    if (!message || !message.trim()) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    const survey = await Survey.findById(surveyId);
    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (survey.creator.toString() !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ü—å–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
      });
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    const responses = await Response.find({ survey: surveyId });

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–∞–Ω—å
    const questionStats = survey.questions.map(question => {
      const questionAnswers = {};

      responses.forEach(response => {
        const answer = response.answers.find(a => a.questionId.toString() === question._id.toString());
        if (answer && answer.answer) {
          if (Array.isArray(answer.answer)) {
            answer.answer.forEach(val => {
              questionAnswers[val] = (questionAnswers[val] || 0) + 1;
            });
          } else {
            const answerValue = answer.answer.toString();
            questionAnswers[answerValue] = (questionAnswers[answerValue] || 0) + 1;
          }
        }
      });

      return {
        text: question.text,
        type: question.type,
        answers: questionAnswers
      };
    });

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è AI
    const surveyContext = {
      title: survey.title,
      totalResponses: responses.length,
      questionStats: questionStats
    };

    // –í–∏–∫–ª–∏–∫ AI —á–∞—Ç—É
    console.log('üí¨ AI Chat –∑–∞–ø–∏—Ç:', message);
    const chatResponse = await aiService.chatAboutSurvey(surveyContext, message, history || []);

    res.json({
      success: true,
      data: {
        response: chatResponse
      }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ AI —á–∞—Ç—É:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
    });
  }
};

// –î–æ–¥–∞—Ç–∏ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä–∞ –¥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
const addCollaborator = async (req, res) => {
  try {
    const { id } = req.params;
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        success: false,
        message: 'Email –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
      });
    }

    const survey = await Survey.findById(id);

    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä—ñ–≤
    const creatorId = survey.creator._id ? survey.creator._id.toString() : survey.creator.toString();
    if (creatorId !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: '–¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä—ñ–≤'
      });
    }

    // –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email
    const User = require('../models/User');
    const collaborator = await User.findOne({ email: email.toLowerCase() });

    if (!collaborator) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –Ω–µ –¥–æ–¥–∞—î —Å–µ–±–µ
    if (collaborator._id.toString() === req.user.id) {
      return res.status(400).json({
        success: false,
        message: '–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Å–µ–±–µ —è–∫ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ —î —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä–æ–º
    const isAlreadyCollaborator = survey.collaborators.some(
      (c) => c.user.toString() === collaborator._id.toString()
    );

    if (isAlreadyCollaborator) {
      return res.status(400).json({
        success: false,
        message: '–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä–æ–º'
      });
    }

    // –î–æ–¥–∞—Ç–∏ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä–∞
    survey.collaborators.push({
      user: collaborator._id,
      addedAt: new Date()
    });

    await survey.save();
    await survey.populate('collaborators.user', 'email username name');

    res.json({
      success: true,
      message: '–°–ø—ñ–≤–∞–≤—Ç–æ—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ',
      data: { collaborators: survey.collaborators }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä–∞:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä–∞
const removeCollaborator = async (req, res) => {
  try {
    const { id, collaboratorId } = req.params;

    const survey = await Survey.findById(id);

    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä—ñ–≤
    const creatorId = survey.creator._id ? survey.creator._id.toString() : survey.creator.toString();
    if (creatorId !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: '–¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä—ñ–≤'
      });
    }

    // –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä–∞
    survey.collaborators = survey.collaborators.filter(
      (c) => c.user.toString() !== collaboratorId
    );

    await survey.save();
    await survey.populate('collaborators.user', 'email username name');

    res.json({
      success: true,
      message: '–°–ø—ñ–≤–∞–≤—Ç–æ—Ä–∞ –≤–∏–¥–∞–ª–µ–Ω–æ',
      data: { collaborators: survey.collaborators }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä–∞:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

module.exports = {
  createSurvey,
  getUserSurveys,
  getSurvey,
  getSurveyByLink,
  updateSurvey,
  deleteSurvey,
  getDashboardStats,
  getSingleSurveyStats,
  getAIAnalysis,
  aiChatResponse,
  addCollaborator,
  removeCollaborator
};