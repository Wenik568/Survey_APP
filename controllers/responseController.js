const Response = require('../models/Response');
const Survey = require('../models/Survey');
const { hasAccess } = require('../utils/surveyHelpers');

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
const createResponse = async (req, res) => {
  try {
    const { uniqueLink } = req.params;
    const { answers } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!answers || answers.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      });
    }

    // –ü–æ—à—É–∫ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
    const survey = await Survey.findOne({ uniqueLink });

    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    if (!survey.isActive) {
      return res.status(400).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞—Ç–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
    if (survey.closingDate && new Date() > survey.closingDate) {
      return res.status(400).json({
        success: false,
        message: '–¢–µ—Ä–º—ñ–Ω –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è'
      });
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è IP —Ç–∞ User Agent
    const ipAddress = req.ip || req.connection.remoteAddress;
    const userAgent = req.get('User-Agent');
    const sessionId = req.sessionID || `${ipAddress}-${Date.now()}`;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—è–∫—â–æ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ)
    if (!survey.allowMultipleResponses) {
      const existingResponse = await Response.findOne({
        survey: survey._id,
        'respondentInfo.ipAddress': ipAddress
      });

      if (existingResponse) {
        return res.status(400).json({
          success: false,
          message: '–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∏ –Ω–∞ —Ü–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
        });
      }
    }

    // –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑ Skip Logic
    const isQuestionVisible = (question, answersMap) => {
      if (!question.skipLogic || !question.skipLogic.enabled || !question.skipLogic.condition) {
        return true; // –ù–µ–º–∞—î skip logic - –∑–∞–≤–∂–¥–∏ –≤–∏–¥–∏–º–µ
      }

      const condition = question.skipLogic.condition;

      console.log(`üîç Skip Logic –¥–ª—è "${question.text}":`, JSON.stringify({
        conditionQuestionId: condition.questionId,
        operator: condition.operator,
        expectedValue: condition.value,
        answersMapKeys: Object.keys(answersMap)
      }, null, 2));

      const sourceQuestion = survey.questions.find(q => q._id.toString() === condition.questionId);

      if (!sourceQuestion) {
        console.log(`‚ö†Ô∏è –ü–∏—Ç–∞–Ω–Ω—è-–¥–∂–µ—Ä–µ–ª–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ID: ${condition.questionId}`);
        return true; // –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è-–¥–∂–µ—Ä–µ–ª–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—É—î–º–æ
      }

      const sourceAnswer = answersMap[condition.questionId];

      console.log(`üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:`, {
        sourceAnswer,
        expectedValue: condition.value,
        operator: condition.operator,
        match: sourceAnswer === condition.value
      });

      let result;
      switch (condition.operator) {
        case 'equals':
          // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ —è–∫—â–æ —â–µ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏
          if (!sourceAnswer && sourceAnswer !== 0) {
            result = false;
          } else if (typeof sourceAnswer === 'number' || typeof condition.value === 'number') {
            result = Number(sourceAnswer) === Number(condition.value);
          } else {
            result = sourceAnswer === condition.value;
          }
          break;
        case 'not_equals':
          // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ —è–∫—â–æ —â–µ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏
          if (!sourceAnswer && sourceAnswer !== 0) {
            result = false;
          } else if (typeof sourceAnswer === 'number' || typeof condition.value === 'number') {
            result = Number(sourceAnswer) !== Number(condition.value);
          } else {
            result = sourceAnswer !== condition.value;
          }
          break;
        case 'contains':
          // –î–ª—è checkbox - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∞—Å–∏–≤ –º—ñ—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è
          result = Array.isArray(sourceAnswer) && sourceAnswer.includes(condition.value);
          break;
        case 'not_contains':
          // –î–ª—è checkbox - –ø–æ–∫–∞–∑—É—î–º–æ —è–∫—â–æ –ù–ï –º—ñ—Å—Ç–∏—Ç—å –∞–±–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏
          if (Array.isArray(sourceAnswer)) {
            result = !sourceAnswer.includes(condition.value);
          } else {
            // –Ø–∫—â–æ –Ω–µ –º–∞—Å–∏–≤ (–Ω–µ checkbox) - –≤–≤–∞–∂–∞—î–º–æ —â–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å
            result = true;
          }
          break;
        case 'is_answered':
          // –ü–æ–∫–∞–∑—É—î–º–æ —è–∫—â–æ —î –±—É–¥—å-—è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          if (Array.isArray(sourceAnswer)) {
            result = sourceAnswer.length > 0;
          } else {
            result = sourceAnswer !== '' && sourceAnswer !== undefined && sourceAnswer !== null;
          }
          break;
        default:
          result = true;
      }

      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∏–º–æ—Å—Ç—ñ: ${result}`);
      return result;
    };

    // –°—Ç–≤–æ—Ä—é—î–º–æ Map –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
    const answersMap = {};
    answers.forEach(a => {
      answersMap[a.questionId] = a.answer;
    });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    const processedAnswers = [];

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å (—Ç—ñ–ª—å–∫–∏ –≤–∏–¥–∏–º–∏—Ö)
    for (const question of survey.questions) {
      const isVisible = isQuestionVisible(question, answersMap);

      console.log(`üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: "${question.text}" - required: ${question.required}, visible: ${isVisible}`);

      if (question.required && isVisible) {
        const answer = answers.find(a => a.questionId === question._id.toString());

        if (!answer || !answer.answer || (Array.isArray(answer.answer) && answer.answer.length === 0)) {
          console.log(`‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è: "${question.text}"`);
          return res.status(400).json({
            success: false,
            message: `–ü–∏—Ç–∞–Ω–Ω—è "${question.text}" —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º`
          });
        }
      }
    }

    // –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    for (const answer of answers) {
      const question = survey.questions.find(q => q._id.toString() === answer.questionId);
      
      if (!question) {
        continue; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–µ–≤—ñ–¥–æ–º—ñ –ø–∏—Ç–∞–Ω–Ω—è
      }

      const processedAnswer = {
        questionId: answer.questionId,
        questionText: question.text,
        questionType: question.type,
        answer: answer.answer
      };

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      if (question.type === 'radio' && Array.isArray(answer.answer)) {
        return res.status(400).json({
          success: false,
          message: `–ü–∏—Ç–∞–Ω–Ω—è "${question.text}" –¥–æ–∑–≤–æ–ª—è—î –ª–∏—à–µ –æ–¥–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å`
        });
      }

      if (question.type === 'checkbox' && !Array.isArray(answer.answer)) {
        processedAnswer.answer = [answer.answer];
      }

      processedAnswers.push(processedAnswer);
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const response = new Response({
      survey: survey._id,
      answers: processedAnswers,
      respondentInfo: {
        ipAddress,
        userAgent,
        sessionId
      }
    });

    await response.save();

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É —É—á–∞—Å–Ω–∏–∫—ñ–≤
    if (survey.participantLimit) {
      const totalResponses = await Response.countDocuments({ survey: survey._id });

      if (totalResponses >= survey.participantLimit) {
        survey.isActive = false;
        await survey.save();
        console.log(`üîí –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è "${survey.title}" –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ. –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç: ${survey.participantLimit} —É—á–∞—Å–Ω–∏–∫—ñ–≤`);
      }
    }

    res.status(201).json({
      success: true,
      message: '–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å –≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ!',
      data: {
        responseId: response._id,
        submittedAt: response.submittedAt
      }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∞)
const getSurveyResponses = async (req, res) => {
  try {
    const { surveyId } = req.params;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    const survey = await Survey.findById(surveyId);
    
    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É (–≤–ª–∞—Å–Ω–∏–∫ –∞–±–æ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä)
    if (!hasAccess(survey, req.user.id)) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
      });
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    const responses = await Response.find({ survey: surveyId })
      .sort({ submittedAt: -1 });

    res.json({
      success: true,
      count: responses.length,
      data: {
        survey: {
          id: survey._id,
          title: survey.title,
          questions: survey.questions
        },
        responses
      }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –ï–∫—Å–ø–æ—Ä—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É CSV —Ñ–æ—Ä–º–∞—Ç—ñ
const exportResponses = async (req, res) => {
  try {
    const { surveyId } = req.params;

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    const survey = await Survey.findById(surveyId);

    if (!survey) {
      return res.status(404).json({
        success: false,
        message: '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É (–≤–ª–∞—Å–Ω–∏–∫ –∞–±–æ —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä)
    if (!hasAccess(survey, req.user.id)) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
      });
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    const responses = await Response.find({ survey: surveyId })
      .sort({ submittedAt: -1 });

    if (responses.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É'
      });
    }

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è CSV –∑ BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Excel
    let csvContent = '\uFEFF'; // –î–æ–¥–∞—î–º–æ BOM –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Unicode –≤ Excel
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ (A1, B1, C1, D1, ...)
    const headers = [];
    headers[0] = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á';
    headers[1] = '–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è';
    survey.questions.forEach((question, index) => {
      headers[index + 2] = `–ü–∏—Ç–∞–Ω–Ω—è ${index + 1}`;
    });
    csvContent += headers.join(';') + '\r\n'; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ; —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥–ª—è Excel

    // –î–∞–Ω—ñ (A2, B2, C2, D2, ...)
    responses.forEach(response => {
      const row = [];
      row[0] = response.respondentInfo.ipAddress || '–ê–Ω–æ–Ω—ñ–º';
      row[1] = new Date(response.submittedAt).toLocaleDateString('uk-UA');

      // –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –∫–æ–ª–æ–Ω–∫–∏ C (—ñ–Ω–¥–µ–∫—Å 2)
      survey.questions.forEach((question, index) => {
        const answer = response.answers.find(a => 
          a.questionId.toString() === question._id.toString()
        );

        if (answer) {
          if (Array.isArray(answer.answer)) {
            row[index + 2] = `"${answer.answer.join('; ')}"`;
          } else {
            row[index + 2] = `"${answer.answer || ''}"`;
          }
        } else {
          row[index + 2] = '""';
        }
      });

      csvContent += row.join(';') + '\r\n';
    });

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="survey_${surveyId}_responses.csv"`);

    res.send(csvContent); // BOM –≤–∂–µ –¥–æ–¥–∞–Ω–æ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

module.exports = {
  createResponse,
  getSurveyResponses,
  exportResponses
};