import { useState } from 'react';
import { Modal, Button, Input, Loading } from '../common';
import { aiService } from '../../services/aiService';
import type { Question } from '../../types';

interface AddQuestionsModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAddQuestions: (questions: Question[]) => void;
  existingQuestions: Question[];
  surveyTopic?: string;
}

const AddQuestionsModal: React.FC<AddQuestionsModalProps> = ({
  isOpen,
  onClose,
  onAddQuestions,
  existingQuestions,
  surveyTopic,
}) => {
  const [topic, setTopic] = useState(surveyTopic || '');
  const [count, setCount] = useState(3);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleGenerate = async () => {
    if (!topic.trim()) {
      setError('–í–∫–∞–∂—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å');
      return;
    }

    if (count < 1 || count > 10) {
      setError('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 10');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const newQuestions = await aiService.generateAdditionalQuestions(
        topic.trim(),
        existingQuestions,
        count
      );

      if (newQuestions.length === 0) {
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É.');
        return;
      }

      onAddQuestions(newQuestions);
      onClose();
      setTopic('');
      setCount(3);
    } catch (err: any) {
      setError(err.message || '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω—å');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="‚ûï –î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI" size="md">
      {isLoading ? (
        <Loading text="AI –≥–µ–Ω–µ—Ä—É—î –ø–∏—Ç–∞–Ω–Ω—è..." />
      ) : (
        <div className="space-y-6">
          {error && (
            <div className="p-4 bg-red-50 border border-red-200 text-red-600 rounded-xl">
              {error}
            </div>
          )}

          <Input
            label="üìå –¢–µ–º–∞ –Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å"
            placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: —è–∫—ñ—Å—Ç—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è, –∑—Ä—É—á–Ω—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"
            value={topic}
            onChange={(e) => setTopic(e.target.value)}
            required
          />

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üìä –°–∫—ñ–ª—å–∫–∏ –ø–∏—Ç–∞–Ω—å –¥–æ–¥–∞—Ç–∏?
            </label>
            <input
              type="number"
              min="1"
              max="10"
              className="w-32 px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-all"
              value={count}
              onChange={(e) => setCount(parseInt(e.target.value) || 1)}
            />
            <p className="text-sm text-gray-500 mt-1">–í—ñ–¥ 1 –¥–æ 10 –ø–∏—Ç–∞–Ω—å</p>
          </div>

          <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
            <p className="text-sm text-blue-800">
              üí° <strong>–ü–æ—Ä–∞–¥–∞:</strong> AI –∑–≥–µ–Ω–µ—Ä—É—î –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≤–∫–∞–∑–∞–Ω—É —Ç–µ–º—É, —è–∫—ñ –Ω–µ –¥—É–±–ª—é—é—Ç—å
              —ñ—Å–Ω—É—é—á—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ.
            </p>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button variant="secondary" onClick={onClose}>
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </Button>
            <Button onClick={handleGenerate}>üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏</Button>
          </div>
        </div>
      )}
    </Modal>
  );
};

export default AddQuestionsModal;
