import { useState } from 'react';
import { Modal, Button, Input, Loading } from '../common';
import { aiService } from '../../services/aiService';
import type { AIGenerateSurveyInput, AIGeneratedSurvey } from '../../types';

interface AIGeneratorModalProps {
  isOpen: boolean;
  onClose: () => void;
  onGenerate: (survey: AIGeneratedSurvey) => void;
}

const AIGeneratorModal: React.FC<AIGeneratorModalProps> = ({
  isOpen,
  onClose,
  onGenerate,
}) => {
  const [formData, setFormData] = useState<AIGenerateSurveyInput>({
    topic: '',
    goal: '–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –¥—É–º–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤',
    questionCount: 7,
    questionTypes: ['radio', 'checkbox', 'text'],
  });
  const [additionalInstructions, setAdditionalInstructions] = useState('');

  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const goals = [
    '–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –¥—É–º–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤',
    '–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –ø—Ä–æ–¥—É–∫—Ç—É',
    '–ó–±—ñ—Ä –≤—ñ–¥–≥—É–∫—ñ–≤ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤',
    '–ê–∫–∞–¥–µ–º—ñ—á–Ω–µ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è',
    '–ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç—Ä–µ–± —Ä–∏–Ω–∫—É',
  ];

  const handleGenerate = async () => {
    if (!formData.topic.trim()) {
      setError('–í–∫–∞–∂—ñ—Ç—å —Ç–µ–º—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è');
      return;
    }

    if (formData.questionCount < 3 || formData.questionCount > 20) {
      setError('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 20');
      return;
    }

    if (formData.questionTypes.length === 0) {
      setError('–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–∏–ø –ø–∏—Ç–∞–Ω—å');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const result = await aiService.generateSurvey({
        ...formData,
        additionalInstructions: additionalInstructions.trim() || undefined,
      });
      onGenerate(result);
      onClose();
      setAdditionalInstructions('');
    } catch (err: any) {
      setError(err.message || '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è');
    } finally {
      setIsLoading(false);
    }
  };

  const toggleQuestionType = (type: string) => {
    if (formData.questionTypes.includes(type)) {
      setFormData({
        ...formData,
        questionTypes: formData.questionTypes.filter((t) => t !== type),
      });
    } else {
      setFormData({
        ...formData,
        questionTypes: [...formData.questionTypes, type],
      });
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="ü§ñ AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Ç—É–≤–∞–Ω—å" size="lg">
      {isLoading ? (
        <Loading text="AI –≥–µ–Ω–µ—Ä—É—î –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è..." />
      ) : (
        <div className="space-y-6">
          {error && (
            <div className="p-4 bg-red-50 border border-red-200 text-red-600 rounded-xl">
              {error}
            </div>
          )}

          <Input
            label="üìå –¢–µ–º–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è"
            placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∞–º–∏ –∫–æ–º–ø–∞–Ω—ñ—ó"
            value={formData.topic}
            onChange={(e) => setFormData({ ...formData, topic: e.target.value })}
            required
          />

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üéØ –¶—ñ–ª—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
            </label>
            <select
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-all"
              value={formData.goal}
              onChange={(e) => setFormData({ ...formData, goal: e.target.value })}
            >
              {goals.map((goal) => (
                <option key={goal} value={goal}>
                  {goal}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å
            </label>
            <input
              type="number"
              min="3"
              max="20"
              className="w-32 px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-all"
              value={formData.questionCount}
              onChange={(e) =>
                setFormData({ ...formData, questionCount: parseInt(e.target.value) })
              }
            />
            <p className="text-sm text-gray-500 mt-1">–í—ñ–¥ 3 –¥–æ 20 –ø–∏—Ç–∞–Ω—å</p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              üé® –¢–∏–ø–∏ –ø–∏—Ç–∞–Ω—å
            </label>
            <div className="space-y-2">
              {[
                { value: 'radio', label: '–í–∏–±—ñ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É (–æ–¥–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å)' },
                { value: 'checkbox', label: '–ú–Ω–æ–∂–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä' },
                { value: 'text', label: '–ö–æ—Ä–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å' },
                { value: 'textarea', label: '–î–æ–≤–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å' },
              ].map((type) => (
                <label
                  key={type.value}
                  className="flex items-center gap-3 p-3 border-2 border-gray-200 rounded-xl hover:border-primary-300 cursor-pointer transition-all"
                >
                  <input
                    type="checkbox"
                    checked={formData.questionTypes.includes(type.value)}
                    onChange={() => toggleQuestionType(type.value)}
                    className="w-5 h-5 text-primary-600 rounded focus:ring-primary-500"
                  />
                  <span className="text-gray-700">{type.label}</span>
                </label>
              ))}
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üí° –î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è AI (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            </label>
            <textarea
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-all resize-none"
              rows={3}
              placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É –º–æ–≤—É, –¥–æ–¥–∞–π –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ..."
              value={additionalInstructions}
              onChange={(e) => setAdditionalInstructions(e.target.value)}
            />
            <p className="text-xs text-gray-500 mt-1">
              AI –≤—Ä–∞—Ö—É—î —Ü—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω—å
            </p>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <Button variant="secondary" onClick={onClose}>
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </Button>
            <Button onClick={handleGenerate}>üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏</Button>
          </div>
        </div>
      )}
    </Modal>
  );
};

export default AIGeneratorModal;
