import { test, expect } from '@playwright/test';

/**
 * E2E Test: –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * –°—Ü–µ–Ω–∞—Ä—ñ–π: –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Üí –í–∏—Ö—ñ–¥ ‚Üí –õ–æ–≥—ñ–Ω
 */

test.describe('–ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', () => {
  // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
  const timestamp = Date.now();
  const testUser = {
    username: `testuser${timestamp}`,
    email: `test${timestamp}@example.com`,
    password: 'TestPassword123!',
  };

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ backend –∑–∞–ø—É—â–µ–Ω–∏–π
  test.beforeAll(async ({ request }) => {
    try {
      await request.get('http://localhost:3000/api/auth/profile');
      console.log('‚úÖ Backend is running on port 3000');
    } catch (error) {
      console.error('‚ùå Backend is NOT running! Please start it with: npm start');
      throw new Error('Backend server is not running on http://localhost:3000');
    }
  });

  test('–ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª: —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Üí –≤–∏—Ö—ñ–¥ ‚Üí –ª–æ–≥—ñ–Ω', async ({ page }) => {
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è network requests –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    page.on('request', request => {
      if (request.url().includes('/api/auth/register')) {
        console.log('üì§ Register request:', {
          url: request.url(),
          method: request.method(),
          postData: request.postDataJSON()
        });
      }
    });

    page.on('response', async response => {
      if (response.url().includes('/api/auth/register')) {
        const body = await response.text().catch(() => 'Could not read body');
        console.log('üì• Register response:', {
          status: response.status(),
          body: body.substring(0, 200)
        });
      }
    });

    // ========== –ö–†–û–ö 1: –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ==========
    await test.step('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', async () => {
      await page.goto('/register');

      // –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
      await expect(page.locator('h1')).toContainText('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è');

      // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ placeholder
      await page.getByPlaceholder('–í–∞—à–µ —ñ–º\'—è').fill(testUser.username);
      await page.getByPlaceholder('your@email.com').fill(testUser.email);

      // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–∞—Ä–æ–ª—ñ (–ø–µ—Ä—à–µ –ø–æ–ª–µ - –æ—Å–Ω–æ–≤–Ω–∏–π –ø–∞—Ä–æ–ª—å, –¥—Ä—É–≥–µ - –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è)
      await page.locator('input[type="password"]').first().fill(testUser.password);
      await page.locator('input[type="password"]').nth(1).fill(testUser.password);

      // –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —ñ —á–µ–∫–∞—î–º–æ –Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
      await Promise.all([
        page.waitForURL('**/dashboard', { timeout: 15000 }),
        page.getByRole('button', { name: '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', exact: true }).click()
      ]);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥—ñ
      await expect(page.locator('h2')).toContainText('–í—ñ—Ç–∞—î–º–æ');
    });

    // ========== –ö–†–û–ö 2: –í–∏—Ö—ñ–¥ ==========
    await test.step('–í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏', async () => {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –≤–∏—Ö–æ–¥—É (–º–∞—î —Ç–µ–∫—Å—Ç "–í–∏–π—Ç–∏")
      await page.getByRole('button', { name: /–≤–∏–π—Ç–∏/i }).click();

      // –û—á—ñ–∫—É—î–º–æ —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ª–æ–≥—ñ–Ω—É
      await page.waitForURL('/login', { timeout: 5000 });

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ª–æ–≥—ñ–Ω—É (–º–∞—î —Ç–µ–∫—Å—Ç "–£–≤—ñ–π–¥—ñ—Ç—å –¥–æ –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É")
      await expect(page.locator('text=–£–≤—ñ–π–¥—ñ—Ç—å –¥–æ –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É')).toBeVisible();
    });

    // ========== –ö–†–û–ö 3: –õ–æ–≥—ñ–Ω ==========
    await test.step('–í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –¥–∞–Ω–∏–º–∏', async () => {
      // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É –ª–æ–≥—ñ–Ω—É —á–µ—Ä–µ–∑ placeholder
      await page.getByPlaceholder('your@email.com').fill(testUser.email);
      await page.locator('input[type="password"]').fill(testUser.password);

      // –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É
      await page.getByRole('button', { name: '–£–≤—ñ–π—Ç–∏', exact: true }).click();

      // –û—á—ñ–∫—É—î–º–æ —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ –¥–∞—à–±–æ—Ä–¥
      await page.waitForURL('/dashboard', { timeout: 10000 });

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–∏ –∑–Ω–æ–≤—É –Ω–∞ –¥–∞—à–±–æ—Ä–¥—ñ
      await expect(page.locator('h2')).toContainText('–í—ñ—Ç–∞—î–º–æ');

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      await expect(page.locator('body')).toContainText(testUser.username);
    });
  });

  test.skip('–ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–µ–≤—ñ—Ä–Ω–æ–º—É –ø–∞—Ä–æ–ª—ñ', async ({ page }) => {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É
    const testUser2 = {
      username: `testuser${Date.now()}`,
      email: `test${Date.now()}@example.com`,
      password: 'TestPassword123!',
    };

    await test.step('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', async () => {
      await page.goto('/register');
      await page.getByPlaceholder('–í–∞—à–µ —ñ–º\'—è').fill(testUser2.username);
      await page.getByPlaceholder('your@email.com').fill(testUser2.email);
      await page.locator('input[type="password"]').first().fill(testUser2.password);
      await page.locator('input[type="password"]').nth(1).fill(testUser2.password);
      await page.getByRole('button', { name: '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', exact: true }).click();
      await page.waitForURL('/dashboard', { timeout: 10000 });

      // –í–∏–π—Ç–∏
      await page.getByRole('button', { name: /–≤–∏–π—Ç–∏/i }).click();
      await page.waitForURL('/login', { timeout: 5000 });
    });

    await test.step('–°–ø—Ä–æ–±–∞ –ª–æ–≥—ñ–Ω—É –∑ –Ω–µ–≤—ñ—Ä–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º', async () => {
      // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ placeholder
      await page.getByPlaceholder('your@email.com').fill(testUser2.email);
      await page.locator('input[type="password"]').fill('WrongPassword123!');

      await page.getByRole('button', { name: '–£–≤—ñ–π—Ç–∏', exact: true }).click();

      // –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É (—á–µ—Ä–≤–æ–Ω–∏–π –±–ª–æ–∫ –∑ —Ç–µ–∫—Å—Ç–æ–º)
      const errorMessage = page.locator('.bg-red-50, .text-red-600, [class*="error"]').first();
      await expect(errorMessage).toBeVisible({ timeout: 5000 });
    });
  });
});
